#!/bin/bash
#==============================================================================
# Copyright (C) 2019-present Alces Flight Ltd.
#
# This file is part of Flight Directory.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which is available at
# <https://www.eclipse.org/legal/epl-2.0>, or alternative license
# terms made available by Alces Flight Ltd - please direct inquiries
# about licensing to licensing@alces-flight.com.
#
# Flight Directory is distributed in the hope that it will be useful, but
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
# IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS
# OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. See the Eclipse Public License 2.0 for more
# details.
#
# You should have received a copy of the Eclipse Public License 2.0
# along with Flight Directory. If not, see:
#
#  https://opensource.org/licenses/EPL-2.0
#
# For more information on Flight Directory, please visit:
# https://github.com/openflighthpc/flight-directory
#==============================================================================

clientname=$1
cluster=$2

keytab=/opt/directory/etc/hadder.keytab
keyuser=hadder
domain=$(hostname -d)
realm=$(echo `hostname -d` | sed -e 's/\(.*\)/\U\1/')
reversezone="`hostname -i | cut -d . -f 3`.`hostname -i | cut -d . -f 2`.`hostname -i | cut -d . -f 1`.in-addr.arpa."

purge_hostgroup_entry() {

    if [ -z $cluster ];
    then
        if [ "$(ipa hostgroup-show usernodes | grep $clientname.$domain)" ];
        then
            ipa hostgroup-remove-member usernodes --hosts=$clientname.$domain
        fi
    elif [ ! -z $cluster ];
    then
        if [ "$(ipa hostgroup-show usernodes | grep $clientname.$cluster.$domain)" ];
        then
            ipa hostgroup-remove-member usernodes --hosts=$clientname.$cluster.$domain
        fi
    fi

}

purge_reverse_records() {

    if [ -z $cluster ];
    then
        until [ ! "$(ipa dnsrecord-find $reversezone | grep "$clientname.$domain")" ];
        do
            recordname=$(ipa dnsrecord-find $reversezone |
                           grep -B 1 "${clientname}.${domain}" |
                           grep "Record\ name:" |
                           awk '{print $3}')
            ptr="${clientname}.${domain}."
            ipa dnsrecord-del $reversezone $recordname \
                --ptr-rec=${ptr}
        done
    elif [ ! -z $cluster ];
    then
        until [ ! "$(ipa dnsrecord-find $reversezone | grep "$clientname.$cluster.$domain")" ];
        do
            recordname=$(ipa dnsrecord-find $reversezone |
                         grep -B 1 "${clientname}.${cluster}.${domain}" |
                         grep "Record\ name:" |
                         awk '{print $3}')
            ptr="${clientname}.${cluster}.${domain}."
            ipa dnsrecord-del $reversezone $recordname \
                --ptr-rec=${ptr}
        done
    fi

}

check_node() {

    purge_hostgroup_entry > /dev/null 2>&1
    purge_reverse_records > /dev/null 2>&1
    if [ -z $cluster ];
    then
      domainrecords=$(ipa dnsrecord-find $domain $clientname |
                      grep "${clientname}" |
                      awk '{print $3}')
    elif [ ! -z $cluster ];
    then
      domainrecords=$(ipa dnsrecord-find $cluster.$domain $clientname |
                      grep "${clientname}" |
                      awk '{print $3}')
    fi
    if [ "$domainrecords" == "$clientname" ];
    then
      echo "OK"
      remove_node >> /dev/null
    elif [ -z "$domainrecords" ];
    then
        echo "FAIL - NO ENTRY EXISTS"
        exit 0
    fi

}

remove_node() {

    if [ -z $cluster ];
    then
        ipa dnsrecord-del $domain $clientname --del-all
        ipa host-del $clientname.$domain --updatedns --continue
    elif [ ! -z $cluster ];
    then
        ipa dnsrecord-del $cluster.$domain $clientname --del-all
        ipa host-del $clientname.$cluster.$realm --updatedns --continue
        RECORDS=$(ipa dnsrecord-find $cluster.$domain |
                  grep -v "Record\ name\:\ \@" |
                  grep -v "Record\ name\:\ _kerberos" |
                  grep -v "NS\ record\"\ directory.$domain" |
                  grep -v "TXT\ record\:\ $realm" |
                  grep "Record\ name:" |
                  awk '{print $3}' |
                  wc -l)
        if [ "$RECORDS" -eq 0 ];
        then
          remove_cluster
        fi
    fi

}

remove_cluster() {

    if [ ! -z $cluster ];
    then
        if [ "$(ipa dnszone-find | grep "${cluster}.${domain}." | awk '{print $3}')" == "${cluster}.${domain}." ];
        then
            # Remove the cluster from the realm
            ipa dnsrecord-del $realm $cluster --del-all
            ipa dnszone-del $cluster.$realm > /dev/null 2>&1
        fi
    fi

}

if [ -z $clientname ];
then
    echo "One or more settings not provided"
    echo "Usage: $0 <client name> <cluster>"
    exit 0
else
    kinit -kt $keytab $keyuser@$realm
    check_node
fi
